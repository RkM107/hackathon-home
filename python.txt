from fastapi import FastAPI, HTTPException
from fastapi.responses import FileResponse, JSONResponse
import os

app = FastAPI()

@app.get("/file/{unique_id}")
async def get_file(unique_id: str):
    file_path = f'/path/to/aks/mount/{unique_id}.csv'
    
    if os.path.exists(file_path):
        return FileResponse(file_path, filename=f"{unique_id}.csv")
    else:
        return JSONResponse(
            content={
                'status': 'processing',
                'message': 'File is still being generated. Please try again later.'
            },
            status_code=202  # 202 Accepted
        )

Here's how FileResponse works:
FileResponse is a class provided by FastAPI that handles file serving.
It takes several parameters:
path: The path to the file on the server (required).
filename: The name that will be used when the client downloads the file (optional).
media_type: The MIME type of the file (optional, FastAPI can often guess this).
headers: Any additional headers to include with the response (optional).
When FileResponse(file_path, filename=f"{unique_id}.csv") is returned:
FastAPI reads the file from the specified file_path.
It sets appropriate headers, including Content-Disposition with the specified filename.
It streams the file content to the client.
The client receives the file as a downloadable attachment.
FastAPI handles the file streaming efficiently, which is particularly useful for large files as it doesn't load the entire file into memory.
If the file doesn't exist, we raise an HTTPException with a 404 status code.